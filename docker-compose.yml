version: '3.17'
services:
  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    networks:
      my_network:
        ipv4_address: 192.168.1.10
    depends_on:
      - nginx-service
      - redis
      - mongo-db
    ports:
      - "2005:2005"
    restart: on-failure
    environment:
      MONGO_USER_NAME: ${MONGO_USERNAME}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      MONGO_HOST: ${MONGO_HOST}
      MONGO_PORT: ${MONGO_PORT}
      MONGO_DB_NAME: ${MONGO_DATABASE}
      BOT_TOKEN: ${BOT_TOKEN}
      SERVER_IP_ADDRESS: ${SERVER_IP_ADDRESS}
    volumes:
      - nginx-certs:/nginx-certs
  nginx-service:
    build:
      context: ./nginx-service
      dockerfile: Dockerfile
      args:
        SERVER_IP_ADDRESS: ${SERVER_IP_ADDRESS}
    ports:
      - "443:443"
    volumes:
      - nginx-certs:/nginx-certs
    restart: on-failure
    networks:
      my_network:
        ipv4_address: 192.168.1.20
  redis:
    image: redis:latest
    restart: on-failure
    ports:
      - "6379:6379"
    environment:
        - REDIS_MAXMEMORY=100mb
  typescript-app:
    build:
      context: ./typescript-app
      dockerfile: Dockerfile
    networks:
      my_network:
        ipv4_address: 192.168.1.30  # Adjust the IP address as needed
    depends_on:
      - bot
    restart: on-failure
    ports:
      - "3000:3000"
  mongo-db:
    image: mongo:latest
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    restart: on-failure
    networks:
      my_network:
        ipv4_address: 192.168.1.50

networks:
  my_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.1.0/24

volumes:
  mongo-data:
    driver: local
  nginx-certs:
