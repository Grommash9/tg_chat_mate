language: python
dist: jammy
python: 3.10.13
if: type = push OR type = pull_request

stages:
  - name: pre-deploy
  - name: deploy
  - name: test

before_script:
  - sudo apt-get update
  - sudo apt-get install -y ssh sshpass curl

jobs:
  include:
    - stage: pre-deploy
      script:
        - export PIPENV_VERBOSITY=-1
        - cd bot
        - pip install pipenv
        - pipenv install --dev --skip-lock
        - pipenv graph
        - echo "Running Python linting"
        - pipenv run mypy --version 
        - pipenv run black --version
        - pipenv run isort --version
        - pylint --disable=C0116 --disable=C0114 --disable=R0401 --disable=W0613 --disable=W0718 support_bot
        - flake8 --show-source --statistics --max-complexity 10
        - echo "Running autoflake on support_bot and tests files"
        - pipenv run autoflake --recursive --check --ignore-init-module-imports --remove-unused-variables --remove-all-unused-imports support_bot tests
        - echo "Running mypy, black, and isort checks"
        - pipenv run mypy .
        - pipenv run black --check support_bot tests
        - pipenv run isort --check-only .
        - echo "Python linting completed successfully"

    - stage: deploy
      script:
        - |
          echo "Deploying service on test server"
          sshpass -p $PIPELINE_SERVER_PASSWORD ssh -o StrictHostKeyChecking=no root@$PIPELINE_SERVER_IP_ADDRESS << ENDSSH
          cd /home
          git clone https://github.com/Grommash9/tg_chat_mate
          cd tg_chat_mate
          export DOMAIN=$PIPELINE_SERVER_IP_ADDRESS
          echo "DOMAIN=$PIPELINE_SERVER_IP_ADDRESS" >> .env
          echo "ISSUE_SSL=true" >> .env
          echo "MONGO_USERNAME=root" >> .env
          echo "MONGO_DATABASE=bot_support_db" >> .env
          echo "MONGO_PORT=27017" >> .env
          echo "MONGO_HOST=192.168.1.50" >> .env
          echo "BOT_TOKEN=$BOT_TOKEN" >> .env
          echo "MONGO_PASSWORD=$MONGO_PASSWORD" >> .env
          echo "LONG_GOOD_SECRET_KEY=$LONG_GOOD_SECRET_KEY" >> .env
          echo "ROOT_PASSWORD=$ROOT_PASSWORD" >> .env
          chmod +x install.sh
          ./install.sh
          ENDSSH
      after_failure:
        - |
          sshpass -p $PIPELINE_SERVER_PASSWORD ssh -o StrictHostKeyChecking=no root@$PIPELINE_SERVER_IP_ADDRESS << 'ENDSSH'
          echo "Removing from test server"
          cd /home/tg_chat_mate
          docker compose down
          docker system prune --volumes -a -f
          rm -r /home/tg_chat_mate
          ENDSSH
    - stage: test
      script:
        - echo "Running tests"
        - |
          sshpass -p $PIPELINE_SERVER_PASSWORD ssh -o StrictHostKeyChecking=no root@$PIPELINE_SERVER_IP_ADDRESS << 'ENDSSH'
          docker exec tg_chat_mate-bot-1 pipenv run python tests/healf_check.py
          ENDSSH
      after_failure:
        - |
          echo "Removing from test server"
          sshpass -p $PIPELINE_SERVER_PASSWORD ssh -o StrictHostKeyChecking=no root@$PIPELINE_SERVER_IP_ADDRESS << 'ENDSSH'
          cd /home/tg_chat_mate
          docker compose down
          docker system prune --volumes -a -f
          rm -r /home/tg_chat_mate
          ENDSSH
      after_success:
        - |
          echo "Removing from test server"
          sshpass -p $PIPELINE_SERVER_PASSWORD ssh -o StrictHostKeyChecking=no root@$PIPELINE_SERVER_IP_ADDRESS << 'ENDSSH'
          cd /home/tg_chat_mate
          docker compose down
          docker system prune --volumes -a -f
          rm -r /home/tg_chat_mate
          ENDSSH
            
cache:
  directories:
    - /bot/.venv  # Cache the virtual environment created by Pipenv
    - $HOME/.cache/pip  # Cache Pipenv packages
